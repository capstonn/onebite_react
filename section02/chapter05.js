// 원시 타입 : 기존의 값을 변경할 때 실제 메모리의 값은 수정디지 않음.. 다른 곳을 가르킴
// 값 자체로써 변수에 저장되고 복사된다
// 불볍값이다

// 객체 타입 : 참조값 사용 -> 같은 참조값을 사용하게 됨 -> 원본
// 참조값을 통해 변수에 저장되고 복사된다
// 가변값이다 ( 메모리 값 수정 O)

// 주의사항 1. sideeffct 발생 가능 ( 원본 데이터도 같이 변화 )
// 새로운 객체 생성해서 저장하기 let o1 = {name:"이정환 "} let o2 = {...o1}
// 얕은 복사(객체의 참조값 복사) vs 깊은 복사(새로운 객체를 생성하면서 프로퍼티만 따로 복사) -> 안전함

// 주의사항 2. 객체간의 비교는 기본적으로 참조값을 기준으로 이루어짐

let o1 = { name: "장수현" };
let o2 = o1;
let o3 = { ...o1 };

console.log(o1 === o2);
console.log(o1 === o3); //참조값을 기준으로 객체를 비교하기 때문에 참조값이 달라서 false

console.log(JSON.stringify(o1) === JSON.stringify(o3)); // 결과: true
// 자바스크립트 내장 함수
// 객체를 문자열로 변환하는 기능

o1 === o2; // 얕은 비교 ( 참조값 기준으로 비교 )
JSON.stringify(o1) === JSON.stringify(o2); //깊은 비교 ( 객체를 문자열로 변환하여 비교 )

// 주의사항 3. 배열과 함수도 사실 객체이다
